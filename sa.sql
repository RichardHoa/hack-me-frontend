-- Corrected multi-row INSERT statement
INSERT INTO challenge (name, content, category, user_id) VALUES
('Beginner-SQL-Injection', E'# SQL Injection 101\n\nThis is a classic login bypass challenge. Find a way to log in as **admin**.\n\n### Details\nThe form sends a `POST` request to `/login`. Analyze the request and find the vulnerability.\n\n```sql\nSELECT * FROM users WHERE username = \'admin\' AND password = \'...\';\n```\n\n*Hint: What happens if the password check always returns true?*', 'web hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('XSS-Playground', E'# XSS Playground\n\nYour goal is to execute an alert popup on this page: `alert("XSS")`\n\n> Blockquotes can be useful for hints.\n\nThe page reflects your input from a URL parameter named `q`. The developers have implemented some filtering, but is it enough?\n\n- **Step 1:** Find the vulnerable parameter.\n- **Step 2:** Craft a payload that bypasses the filter.\n\nGood luck!', 'web hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('Caesar-Cipher-Breaker', E'# Caesar Cipher Challenge\n\nThis is a simple substitution cipher. The flag is encrypted below. Can you decrypt it?\n\n**Ciphertext:** `GUR_SYNT_VF_GUNG_JUNG`\n\n### What is a Caesar Cipher?\nA Caesar cipher shifts each letter by a fixed number of places down the alphabet.\n\nFor example, with a shift of 1, `A` would be `B`, `B` would become `C`, etc.\n\n`HINT: The key is 13.`', 'crypto challenge', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('ELF-File-Analysis', E'# Reverse Engineering an ELF\n\nWe have a small 64-bit ELF binary. It asks for a password. Find the correct password to get the flag.\n\n[Download the binary here](./downloads/binary1)\n\n### Tools you might need:\n* `gdb`\n* `radare2`\n* `ghidra`\n\n**Objective:** Reverse the logic and find the string it compares your input against.', 'reverse engineering', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('Forensics-Image-Scan', E'# Hidden in Plain Sight\n\nThere is a secret message hidden inside this image. Can you find it?\n\n![A picture of a cat](./images/cat.jpg)\n\n### Things to look for:\n1. EXIF data\n2. Steganography (using tools like `steghide` or `zsteg`)\n3. Appended data at the end of the file', 'forensics', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('UART-Device-Interface', E'# Embedded Device UART\n\nYou have gained access to the UART interface of an embedded device. The bootlog is captured below. Find the credentials to log in.\n\n```log\nU-Boot 2020.04 (Jul 21 2025 - 09:30:00 +0000)\n\nModel: Custom IoT Device\nCPU:   ARMv7\nMem:   256 MiB\n... press any key to stop autoboot: 0\n\nShell access granted. Default creds: root/password123\n```\n\n| Service | Port |\n|---------|------|\n| SSH     | 22   |\n| Telnet  | 23   |', 'embedded hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('Advanced-SQLi-Union', E'# Union-Based SQLi\n\nThis challenge requires you to extract data from another table.\n\nThe current query retrieves product names. Your task is to use a `UNION` based attack to list all usernames and passwords from the `users` table.\n\n### Table Structure\n\n**`users` table:**\n- `id`\n- `username`\n- `password`\n\nFind the number of columns and then craft your `UNION SELECT` payload.', 'web hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('JWT-Token-Tampering', E'# JWT Security\n\nThe web application uses a JWT for authentication. The token payload looks like this:\n\n```json\n{\n  "user": "guest",\n  "admin": false,\n  "iat": 1753010864\n}\n```\n\nCan you forge a token to gain admin access? The server uses a weak secret. `Hint: The secret is "secret".`', 'web hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('RSA-Factoring', E'# RSA Crypto\n\nWe have captured a public RSA key. The modulus `N` is very small. Can you factor it to find the private key and decrypt the message?\n\n**Public Key (N, e):**\n- N = `17977`\n- e = `7`\n\n**Encrypted Message (Ciphertext):** `11358`\n\nFind the two prime factors of N, then calculate the private exponent `d`.', 'crypto challenge', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('PCAP-Analysis', E'# Network Forensics\n\nWe have captured network traffic in a `.pcap` file. Inside, a user downloaded a file containing a password.\n\n[Download the PCAP file](./downloads/traffic.pcap)\n\n**Task:**\n1. Open the file in Wireshark.\n2. Follow the TCP stream of the HTTP traffic.\n3. Find the downloaded file and extract the flag.\n\n> This is a test of your observation skills!', 'forensics', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('JTAG-Debugging', E'# JTAG on an IoT device\n\nIdentify the JTAG pins on the provided board image and extract the firmware.\n\n![PCB of a device](./images/pcb.png)\n\nCommon JTAG pins are:\n- `TDI` (Test Data In)\n- `TDO` (Test Data Out)\n- `TCK` (Test Clock)\n- `TMS` (Test Mode Select)', 'embedded hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('Android-APK-Decompilation', E'# Android Reverse Engineering\n\nThis APK has a hardcoded API key. Decompile the app and find the key.\n\n[Download APK](./downloads/app.apk)\n\n### Recommended Tools:\n- `jadx-gui`\n- `apktool`\n\nSearch the decompiled source code for strings that look like API keys.', 'reverse engineering', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('Directory-Traversal', E'# Path Traversal\n\nThe application lets you view files from a directory, but you are jailed. Find a way to read `/etc/passwd`.\n\nExample URL: `https://challenge.com/view?file=report.txt`\n\nTry to use `../` to traverse up the directory structure. Be aware of filters!', 'web hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('Vigenere-Cipher', E'# Vigenère Cipher Fun\n\nThe Vigenère cipher is a method of encrypting alphabetic text by using a series of interwoven Caesar ciphers based on the letters of a keyword.\n\n**Keyword:** `HACKME`\n**Plaintext:** `THISISAVERYSECRETMESSAGE`\n\nYour task is to encrypt the message.', 'crypto challenge', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('Memory-Dump-Analysis', E'# Memory Forensics\n\nA memory dump from a compromised machine is available. Find the flag that was on the user''s clipboard.\n\n[Download dump file](./downloads/mem.dump)\n\nUse Volatility or a similar tool to analyze the dump.\n\n```bash\nvol.py -f mem.dump imageinfo\nvol.py -f mem.dump --profile=Win7SP1x64 clipboard\n```', 'forensics', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('Firmware-Extraction', E'# Firmware Fun\n\nThis firmware file for a router is encrypted. Find a way to decrypt it and analyze its contents.\n\nThe encryption is a simple XOR with a single repeating byte as the key.\n\n`Hint: The file starts with a known header. Use that to find the key.`', 'embedded hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('DotNet-Assembly-Reversing', E'# .NET Reversing\n\nThis C# application checks a license key. Your goal is to bypass the license check or find a valid key.\n\nUse tools like `dnSpy` or `ILSpy` to decompile and debug the assembly.', 'reverse engineering', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('SSRF-Challenge', E'# Server-Side Request Forgery\n\nThe application fetches an image from a URL you provide. Exploit this functionality to make the server perform a request to its internal metadata service at `http://169.254.169.254/`.\n\nThis is a common vulnerability in cloud environments.', 'web hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('Hashing-Collision', E'# Hash Collision\n\nFind two different inputs that produce the same MD5 hash.\n\nThis demonstrates why MD5 is not secure for integrity checking.\n\n> This is a theoretical challenge that requires research, not just coding.', 'crypto challenge', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9'),
('XXE-Injection', E'# XML External Entity (XXE)\n\nThe application parses an XML input from the user. Exploit the XML parser to read local files on the server.\n\n### Payload Example\n```xml\n<?xml version="1.0" ?>\n<!DOCTYPE root [\n  <!ENTITY xxe SYSTEM "file:///etc/passwd">\n]>\n<root>&xxe;</root>\n```', 'web hacking', '95f175aa-1fb7-4c0c-ab0a-3d6078a531a9');